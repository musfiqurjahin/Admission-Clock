
const encodedCSS = "";

// Decode the CSS
const decodedCSS = atob(encodedCSS);

// Create a <style> element
const style = document.createElement('style');

// Add decoded CSS to the <style> element
style.innerHTML = decodedCSS;

// Append the <style> element to the head
document.head.appendChild(style);
